---
layout: post
title: SOS 누르미
date: 2019-05-06 00:00:00 +0300
description:  sos 누르미 Application  # Add post description (optional)
img: sos.jpg # Add image post (optional)
---
### Stack : Spring3, mybatis
### 프로젝트 기간 (2018.08 ~ 2018.10)
### 서비스 내용
#### SOS 구조요청  
여성 안심 귀가 서비스로 긴급 상황에 SOS 요청을 할 수 있도록 도와주는 Application.  
![sos3]({{site.baseurl}}/assets/img/sos3.jpg)    
### 담당업무  
- 기존 Spring 서버에 지역에 따른 현재 날씨정보 API 추가  

### 프로젝트 설계    
#### 날씨 정보 model 생성
- 통합 대기 환경 지수
- 자외선 지수
- 동네 날씨 정보   

#### API Throttling
공공 데이터 포털 Open API를 활용하여 현재 날씨 데이터를 받아오는 작업을 해야했는데 하루 API 요청 횟수가 제한되어 있었다.  
단말에서 직접 공공 데이터 포털 쪽으로 날씨 API 를 요청 할 경우 API Throttling 이 발생하는 현상이 생겼다.  
이를 해결하기 위해 서버에서 API 를 요청하고 DB에 저장하는 방식으로 바꾸고 단말에서 날씨 API 요청이 있을때마다 데이터를 내려주기로 설계 하였다.



#### 데이터 parsing 및 bind
- parsing  

날씨 데이터는 각 날씨 정보 마다 JSON 형식으로 내려왔고, 이를 서버에선 org.json.simple library 를 사용해 파싱 하였다.    
   
![sos4]({{site.baseurl}}/assets/img/sos4.jpg)  

```java    
public JSONObject requestDataOrg(String sUrl) {

		URL url = null;
		StringBuffer jsonHtml = new StringBuffer();

		try{
			url = new URL(sUrl);
			InputStream uis = url.openStream();
			BufferedReader br = new BufferedReader(new InputStreamReader(uis, "UTF-8"));

			String line = null;
			while ((line = br.readLine()) != null) {
				jsonHtml.append(line + "\r\n");
			}
			br.close();
			uis.close();

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		JSONObject resultJson = (JSONObject) JSONValue.parse(jsonHtml.toString());
		return resultJson;
	}
```  

- bind  
parsing 된 Json String 을 ObjectMapper 를 사용하여 각 모델에 데이터를 bind 시킴.  

```java  
    ex) 
        ObjectMapper weatherMapper = new ObjectMapper();
        realTime = weatherMapper.readValue(items.get("item").toString(),new TypeReference<List<WeatherRealTime>>(){});
```


#### DB Insert
통합 대기 환경지수 정보나 , 자외선 지수 API 같은 경우 각 시간마다 한번씩 요청해 서버에서 데이터를 저장하여 가지고 있었으면 됬었다.
이를 quartz 스케쥴러를 사용하여 일정 시간 마다 공공 데이터 포털에 API를 요청하고 결과 값을 DB에 저장 하는 형식으로 구현 하였다.

```xml  
    <task:scheduled-tasks scheduler="scheduler">
		<task:scheduled ref="weatherService" method="insertUltraRays"
			cron="0 0 7 * * *" />
		<task:scheduled ref="weatherService" method="insertAirPol"
			cron="0 0 */6 * * *" />
	</task:scheduled-tasks>
```  


 
